# -*- coding: utf-8 -*-
"""
–°—Ç—Ä–∞–Ω–∏—Ü–∞ Streamlit: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º (–±–µ–∑ ¬´—Ç–µ–∫—É—â–µ–≥–æ/–ø—Ä–æ—à–ª–æ–≥–æ¬ª)
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –¢–í–û–ò –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ Excel:

  open_time        ‚Äî –¥–∞—Ç–∞/–≤—Ä–µ–º—è –ø—Ä–æ–¥–∞–∂–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –º–µ—Å—è—á–Ω–æ–π –∞–≥—Ä–µ–≥–∞—Ü–∏–∏)
  article_name     ‚Äî –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
  final_sum        ‚Äî —Å—É–º–º–∞/–≤—ã—Ä—É—á–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
  article_category ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä)
  only_glass_cat   ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏—è ¬´–ø–æ –±–æ–∫–∞–ª–∞–º¬ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä)
  article_price, article_profit, glass, glass_price, glass_profit ‚Äî –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –Ω–æ –Ω–µ –º–µ—à–∞—é—Ç

–ß—Ç–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:
  ‚Ä¢ –§–∏–ª—å—Ç—Ä—ã: –ø–µ—Ä–∏–æ–¥ (–º–µ—Å—è—Ü-–æ—Ç/–º–µ—Å—è—Ü-–¥–æ), –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —Ç–æ–ª—å–∫–æ –ø–æ –±–æ–∫–∞–ª–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∫–æ–ª–æ–Ω–∫–∏)
  ‚Ä¢ –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º (–ª–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ –º–µ—Å—è—Ü–∞–º)
  ‚Ä¢ –¢–û–ü‚ÄëN –∏ –ê–Ω—Ç–∏–ª–∏–¥–µ—Ä—ã‚ÄëN –ø–æ —Å—É–º–º–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ (bar chart)
  ‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º: ¬´–°—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥¬ª, ¬´–°—Ä–µ–¥–Ω–µ–µ –≤ –º–µ—Å.¬ª, ¬´–¢—Ä–µ–Ω–¥ –≤ —Ç–∞–±–ª–∏—Ü–µ¬ª = –º–∏–Ω–∏‚Äë–≥—Ä–∞—Ñ–∏–∫ (—Å—Ç–æ–ª–±–∏–∫–∏ –ò–õ–ò –ª–∏–Ω–∏—è)

–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç:
  1) –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∫ pages/03_–°—Ä–∞–≤–Ω–µ–Ω–∏–µ_–ø–æ_–º–µ—Å—è—Ü–∞–º.py
  2) –ü–æ–ª–æ–∂–∏—Ç–µ all_sales.xlsx –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (—Ä—è–¥–æ–º —Å app.py) –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å –Ω–∏–∂–µ.
  3) –ó–∞–ø—É—Å–∫–∞–π—Ç–µ: streamlit run app.py ‚Üí –≤–∫–ª–∞–¥–∫–∞ ¬´03 –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º¬ª
"""
from __future__ import annotations

import pandas as pd
import streamlit as st

st.set_page_config(page_title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ –º–µ—Å—è—Ü–∞–º", page_icon="üóìÔ∏è", layout="wide")

st.title("üóìÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º")
st.caption("–§–∏–ª—å—Ç—Ä—ã –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ù–∏–∫–∞–∫–æ–≥–æ '—Ç–µ–∫—É—â–∏–π/–ø—Ä–æ—à–ª—ã–π' ‚Äî —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ú–∏–Ω–∏‚Äë–≥—Ä–∞—Ñ–∏–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî —Å—Ç–æ–ª–±–∏–∫–∏.")

# ------------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
# ------------------------------
@st.cache_data(show_spinner=False)
def load_sales(path: str = "/Users/nl/streamlit_test/data/all_sales.xlsx") -> pd.DataFrame:
    df = pd.read_excel(path)
    # –ü—Ä–∏–≤–µ–¥—ë–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É ‚Äî —Ç–∞–∫ –Ω–∞–¥—ë–∂–Ω–µ–µ
    df.columns = [str(c).strip().lower() for c in df.columns]

    need = {"open_time", "article_name", "final_sum"}
    missing = need - set(df.columns)
    if missing:
        raise ValueError(f"–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {sorted(missing)}")

    # –¢–∏–ø—ã
    df["open_time"] = pd.to_datetime(df["open_time"], errors="coerce")
    df = df.dropna(subset=["open_time"]).copy()
    df["final_sum"] = pd.to_numeric(df["final_sum"], errors="coerce").fillna(0)

    # –ú–µ—Å—è—Ü –∏–∑ –¥–∞—Ç—ã
    df["month"] = df["open_time"].dt.to_period("M")
    return df

try:
    df = load_sales()
except Exception as e:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å all_sales.xlsx. –ù—É–∂–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: open_time, article_name, final_sum")
    st.exception(e)
    st.stop()

# ------------------------------
# –§–∏–ª—å—Ç—Ä—ã (–≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –±–µ–∑ —Å–∞–π–¥–±–∞—Ä–∞)
# ------------------------------
months_all = df["month"].dropna().sort_values().unique().tolist()
labels = [m.strftime("%Y-%m") for m in months_all]

with st.expander("–§–∏–ª—å—Ç—Ä—ã", expanded=True):
    left_i = st.selectbox(
        "–û—Ç –º–µ—Å—è—Ü–∞",
        options=list(range(len(months_all))),
        index=max(0, len(months_all) - 12),
        format_func=lambda i: labels[i],
    )
    right_i = st.selectbox(
        "–î–æ –º–µ—Å—è—Ü–∞",
        options=list(range(len(months_all))),
        index=len(months_all) - 1,
        format_func=lambda i: labels[i],
    )
    start_m, end_m = sorted([months_all[left_i], months_all[right_i]])

    # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –µ—Å—Ç—å
    cat_col = "article_category" if "article_category" in df.columns else None
    glass_cat_col = "only_glass_cat" if "only_glass_cat" in df.columns else None
    glass_flag_col = "glass" if "glass" in df.columns else None

    if cat_col:
        cats = ["(–≤—Å–µ)"] + sorted(df[cat_col].dropna().astype(str).unique().tolist())
        sel_cat = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", options=cats, index=0)
    else:
        sel_cat = "(–≤—Å–µ)"

    only_glass = False
    if glass_cat_col or glass_flag_col:
        only_glass = st.checkbox("–¢–æ–ª—å–∫–æ –ø–æ –±–æ–∫–∞–ª–∞–º", value=False, help="–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ only_glass_cat/glass, –µ—Å–ª–∏ –µ—Å—Ç—å")

    top_n = st.slider("–†–∞–∑–º–µ—Ä –¢–û–ü‚ÄëN / –ê–Ω—Ç–∏–ª–∏–¥–µ—Ä–æ–≤‚ÄëN", min_value=3, max_value=30, value=5)

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º
mask_period = (df["month"] >= start_m) & (df["month"] <= end_m)
cut = df.loc[mask_period].copy()

if sel_cat != "(–≤—Å–µ)" and cat_col:
    cut = cut[cut[cat_col].astype(str) == sel_cat]

if only_glass:
    if glass_cat_col and cut[glass_cat_col].notna().any():
        cut = cut[cut[glass_cat_col].astype(str).str.len() > 0]
    elif glass_flag_col and glass_flag_col in cut.columns:
        cut[glass_flag_col] = cut[glass_flag_col].astype(str).str.lower().isin(["true", "1", "–¥–∞", "yes", "y"])  # –ø—Ä–∏–≤–æ–¥–∏–º –∫ bool
        cut = cut[cut[glass_flag_col] == True]

# ------------------------------
# –û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º (–º–µ—Å—è—á–Ω–∞—è)
# ------------------------------

total_monthly = cut.groupby("month")["final_sum"].sum().sort_index()
colA, colB = st.columns([2, 1])
with colA:
    st.subheader("–û–±—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ (—Å—É–º–º–∞ –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º)")
    tmp = total_monthly.copy()
    tmp.index = tmp.index.to_timestamp("M")
    st.line_chart(tmp)
with colB:
    st.metric("–ü–µ—Ä–∏–æ–¥", f"{start_m.strftime('%Y-%m')} ‚Äî {end_m.strftime('%Y-%m')}")
    st.metric("–¢–æ–≤–∞—Ä–æ–≤ –≤ –≤—ã–±–æ—Ä–∫–µ", f"{cut['article_name'].nunique():,}".replace(",", " "))
    st.metric("–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂", f"{int(total_monthly.sum()):,}".replace(",", " "))

st.divider()

# ------------------------------
# –¢–û–ü‚ÄëN / –ê–Ω—Ç–∏–ª–∏–¥–µ—Ä—ã‚ÄëN –ø–æ —Å—É–º–º–µ –∑–∞ –ø–µ—Ä–∏–æ–¥
# ------------------------------
by_product_total = cut.groupby("article_name")["final_sum"].sum().sort_values(ascending=False)
col1, col2 = st.columns(2)
with col1:
    st.subheader(f"–¢–û–ü‚Äë{top_n} –ø–æ —Å—É–º–º–µ –∑–∞ –ø–µ—Ä–∏–æ–¥")
    st.bar_chart(by_product_total.head(top_n))
with col2:
    st.subheader(f"–ê–Ω—Ç–∏–ª–∏–¥–µ—Ä—ã‚Äë{top_n} (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥)")
    st.bar_chart(by_product_total.tail(top_n))

st.divider()

# ------------------------------
# –¢–∞–±–ª–∏—Ü–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º —Å –º–∏–Ω–∏‚Äë–≥—Ä–∞—Ñ–∏–∫–æ–º (–º–µ—Å—è—Ü –∫ –º–µ—Å—è—Ü—É) ‚Äî –ê–ë–°–û–õ–Æ–¢–ù–´–ï –∑–Ω–∞—á–µ–Ω–∏—è
# ------------------------------

# –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –ø–µ—Ä–∏–æ–¥–∞
period_months = pd.period_range(start=start_m, end=end_m, freq="M")

# product√ómonth ‚Üí —Å—É–º–º–∞ final_sum
pm = (
    cut.groupby(["article_name", "month"], dropna=False)["final_sum"]
      .sum().unstack(fill_value=0)
)

# –î–æ–±–∞–≤–∏–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Å—è—Ü—ã, —á—Ç–æ–±—ã —É –≤—Å–µ—Ö –±—ã–ª –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
for m in period_months:
    if m not in pm.columns:
        pm[m] = 0
pm = pm[sorted(pm.columns)]

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ —Ä—è–¥—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–≤–∞—Ä—É
series_list = [pm.loc[idx, period_months].astype(float).tolist() for idx in pm.index]

# –°–≤–æ–¥–∫–∞
summary = pd.DataFrame(index=pm.index)
summary["–°—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥"] = [sum(vs) for vs in series_list]
summary["–°—Ä–µ–¥–Ω–µ–µ –≤ –º–µ—Å."] = [round(sum(vs) / len(period_months), 2) for vs in series_list]
summary = (
    summary.sort_values("–°—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥", ascending=False)
           .reset_index()
           .rename(columns={"article_name": "–¢–æ–≤–∞—Ä"})
)

# –í—ã–±–æ—Ä –≤–∏–¥–∞ –º–∏–∫—Ä–æ–≥—Ä–∞—Ñ–∏–∫–∞: —Å—Ç–æ–ª–±–∏–∫–∏ (–≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞) –∏–ª–∏ –ª–∏–Ω–∏—è
with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–Ω–∏‚Äë–≥—Ä–∞—Ñ–∏–∫–∞", expanded=False):
    chart_type = st.radio("–¢–∏–ø –º–∏–Ω–∏‚Äë–≥—Ä–∞—Ñ–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ", ["–°—Ç–æ–ª–±–∏–∫–∏", "–õ–∏–Ω–∏—è"], index=0, horizontal=True,
                          help="'–°—Ç–æ–ª–±–∏–∫–∏' –æ–±—ã—á–Ω–æ —á–∏—Ç–∞—é—Ç—Å—è –ª—É—á—à–µ –ø—Ä–∏ –º–µ—Å—è—á–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏.")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞
trend_col = "–¢—Ä–µ–Ω–¥ (—Å—Ç–æ–ª–±–∏–∫–∏)" if chart_type == "–°—Ç–æ–ª–±–∏–∫–∏" else "–¢—Ä–µ–Ω–¥ (–ª–∏–Ω–∏—è)"
summary[trend_col] = series_list

# Column config –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø
help_txt = f"–ú–µ—Å—è—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥: {start_m.strftime('%Y-%m')} ‚Äî {end_m.strftime('%Y-%m')}"
try:
    if chart_type == "–°—Ç–æ–ª–±–∏–∫–∏":
        trend_cfg = st.column_config.BarChartColumn(trend_col, help=help_txt, y_min=0, width="large")
    else:
        trend_cfg = st.column_config.LineChartColumn(trend_col, help=help_txt, y_min=0, width="large")
except Exception:
    # –§–æ–ª–±—ç–∫ –Ω–∞ –ª–∏–Ω–∏—é, –µ—Å–ª–∏ BarChartColumn –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ Streamlit
    trend_cfg = st.column_config.LineChartColumn(trend_col, help=help_txt, y_min=0, width="large")

column_config = {
    "–¢–æ–≤–∞—Ä": st.column_config.TextColumn("–¢–æ–≤–∞—Ä", width="medium"),
    "–°—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥": st.column_config.NumberColumn("–°—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥", format="%d", width="small"),
    "–°—Ä–µ–¥–Ω–µ–µ –≤ –º–µ—Å.": st.column_config.NumberColumn("–°—Ä–µ–¥–Ω–µ–µ –≤ –º–µ—Å.", format="%.2f", width="small"),
    trend_col: trend_cfg,
}

visible_cols = ["–¢–æ–≤–∞—Ä", "–°—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥", "–°—Ä–µ–¥–Ω–µ–µ –≤ –º–µ—Å.", trend_col]

st.subheader("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º")
st.dataframe(
    summary[visible_cols],
    use_container_width=True,
    hide_index=True,
    column_config=column_config,
)

# –≠–∫—Å–ø–æ—Ä—Ç CSV
with st.expander("üì• –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã (CSV)"):
    csv = summary[visible_cols].to_csv(index=False).encode("utf-8-sig")
    st.download_button(
        "–°–∫–∞—á–∞—Ç—å CSV",
        data=csv,
        file_name=f"products_monthly_{start_m.strftime('%Y-%m')}_{end_m.strftime('%Y-%m')}.csv",
        mime="text/csv",
    )
